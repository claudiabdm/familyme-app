"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
function getProjectNameForProjectAssetsJson(manifestFile) {
    return _.get(manifestFile, ['project', 'restore', 'projectName'], {});
}
function getProjectVersionForProjectAssetsJson(manifestFile) {
    return _.get(manifestFile, ['project', 'version'], {});
}
function buildPackageTree(name, version) {
    const depTree = {
        dependencies: {},
        name,
        version,
    };
    return depTree;
}
// Currently the function getDependencyTreeFromProjectAssetsJson returns
// a two level deep flat list of 100% of dependencies.
// TODO: Get full tree
function getDependencyTreeFromProjectAssetsJson(manifestFile, targetFrameWork) {
    const projectName = getProjectNameForProjectAssetsJson(manifestFile);
    const projectVersion = getProjectVersionForProjectAssetsJson(manifestFile);
    const depTree = buildPackageTree(projectName, projectVersion);
    const topLevelDeps = Object.keys(_.get(manifestFile, ['targets', targetFrameWork], {}));
    for (const topLevelDep of topLevelDeps) {
        const [topLevelDepName, topLevelDepVersion] = topLevelDep.split('/');
        const topLevelDepTree = buildPackageTree(topLevelDepName, topLevelDepVersion);
        const transitiveDeps = _.get(manifestFile, ['targets', targetFrameWork, topLevelDep, 'dependencies'], {});
        for (const transitiveDep of Object.keys(transitiveDeps)) {
            const transitiveDepVersion = transitiveDeps[transitiveDep];
            const transitiveDepTree = buildPackageTree(transitiveDep, transitiveDepVersion);
            topLevelDepTree.dependencies[transitiveDep] = transitiveDepTree;
        }
        depTree.dependencies[topLevelDepName] = topLevelDepTree;
    }
    return depTree;
}
exports.getDependencyTreeFromProjectAssetsJson = getDependencyTreeFromProjectAssetsJson;
//# sourceMappingURL=project-assets-json-parser.js.map