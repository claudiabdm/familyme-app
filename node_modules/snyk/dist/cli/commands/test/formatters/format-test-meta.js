"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const right_pad_1 = require("../../../../lib/right-pad");
function formatTestMeta(res, options) {
    const padToLength = 19; // chars to align
    const packageManager = res.packageManager || options.packageManager;
    const targetFile = res.targetFile || res.displayTargetFile || options.file;
    const openSource = res.isPrivate ? 'no' : 'yes';
    const meta = [
        chalk_1.default.bold(right_pad_1.rightPadWithSpaces('Organization: ', padToLength)) + res.org,
        chalk_1.default.bold(right_pad_1.rightPadWithSpaces('Package manager: ', padToLength)) +
            packageManager,
    ];
    if (targetFile) {
        meta.push(chalk_1.default.bold(right_pad_1.rightPadWithSpaces('Target file: ', padToLength)) + targetFile);
    }
    if (res.projectName) {
        meta.push(chalk_1.default.bold(right_pad_1.rightPadWithSpaces('Project name: ', padToLength)) +
            res.projectName);
    }
    if (options.docker) {
        meta.push(chalk_1.default.bold(right_pad_1.rightPadWithSpaces('Docker image: ', padToLength)) +
            options.path);
    }
    else {
        meta.push(chalk_1.default.bold(right_pad_1.rightPadWithSpaces('Open source: ', padToLength)) + openSource);
        meta.push(chalk_1.default.bold(right_pad_1.rightPadWithSpaces('Project path: ', padToLength)) +
            options.path);
    }
    if (res.docker && res.docker.baseImage) {
        meta.push(chalk_1.default.bold(right_pad_1.rightPadWithSpaces('Base image: ', padToLength)) +
            res.docker.baseImage);
    }
    if (res.filesystemPolicy) {
        meta.push(chalk_1.default.bold(right_pad_1.rightPadWithSpaces('Local Snyk policy: ', padToLength)) +
            chalk_1.default.green('found'));
        if (res.ignoreSettings && res.ignoreSettings.disregardFilesystemIgnores) {
            meta.push(chalk_1.default.bold(right_pad_1.rightPadWithSpaces('Local Snyk policy ignored: ', padToLength)) + chalk_1.default.red('yes'));
        }
    }
    if (res.licensesPolicy) {
        meta.push(chalk_1.default.bold(right_pad_1.rightPadWithSpaces('Licenses: ', padToLength)) +
            chalk_1.default.green('enabled'));
    }
    return meta.join('\n');
}
exports.formatTestMeta = formatTestMeta;
//# sourceMappingURL=format-test-meta.js.map