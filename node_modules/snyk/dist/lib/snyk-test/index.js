"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
module.exports = test;
const detect = require('../detect');
const runTest = require('./run-test');
const chalk = require('chalk');
const pm = require('../package-managers');
const { UnsupportedPackageManagerError } = require('../errors');
function test(root, options, callback) {
    return __awaiter(this, void 0, void 0, function* () {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (!options) {
            options = {};
        }
        const promise = executeTest(root, options);
        if (callback) {
            promise
                .then((res) => {
                callback(null, res);
            })
                .catch(callback);
        }
        return promise;
    });
}
function executeTest(root, options) {
    try {
        if (!options.allProjects) {
            options.packageManager = detect.detectPackageManager(root, options);
        }
        return run(root, options).then((results) => {
            for (const res of results) {
                if (!res.packageManager) {
                    res.packageManager = options.packageManager;
                }
            }
            if (results.length === 1) {
                // Return only one result if only one found as this is the default usecase
                return results[0];
            }
            // For gradle, yarnWorkspaces, allProjects we may be returning more than one result
            return results;
        });
    }
    catch (error) {
        return Promise.reject(chalk.red.bold(error));
    }
}
function run(root, options) {
    const packageManager = options.packageManager;
    if (!(options.docker ||
        options.allProjects ||
        pm.SUPPORTED_PACKAGE_MANAGER_NAME[packageManager])) {
        throw new UnsupportedPackageManagerError(packageManager);
    }
    return runTest(packageManager, root, options);
}
//# sourceMappingURL=index.js.map