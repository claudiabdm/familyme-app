"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const debugModule = require("debug");
const cli_interface_1 = require("@snyk/cli-interface");
const find_files_1 = require("../find-files");
const errors_1 = require("../errors");
const get_multi_plugin_result_1 = require("./get-multi-plugin-result");
const get_single_plugin_result_1 = require("./get-single-plugin-result");
const detect_1 = require("../detect");
const analytics = require("../analytics");
const convert_single_splugin_res_to_multi_custom_1 = require("./convert-single-splugin-res-to-multi-custom");
const convert_multi_plugin_res_to_multi_custom_1 = require("./convert-multi-plugin-res-to-multi-custom");
const debug = debugModule('snyk');
// Force getDepsFromPlugin to return scannedProjects for processing
function getDepsFromPlugin(root, options) {
    return __awaiter(this, void 0, void 0, function* () {
        let inspectRes;
        if (options.allProjects) {
            const levelsDeep = options.detectionDepth;
            const ignore = options.exclude ? options.exclude.split(',') : [];
            const targetFiles = yield find_files_1.find(root, ignore, detect_1.AUTO_DETECTABLE_FILES, levelsDeep);
            debug(`auto detect manifest files, found ${targetFiles.length}`, targetFiles);
            if (targetFiles.length === 0) {
                throw errors_1.NoSupportedManifestsFoundError([root]);
            }
            inspectRes = yield get_multi_plugin_result_1.getMultiPluginResult(root, options, targetFiles);
            const analyticData = {
                scannedProjects: inspectRes.scannedProjects.length,
                targetFiles,
                packageManagers: targetFiles.map((file) => detect_1.detectPackageManagerFromFile(file)),
                levelsDeep,
                ignore,
            };
            analytics.add('allProjects', analyticData);
            return inspectRes;
        }
        // TODO: is this needed for the auto detect handling above?
        // don't override options.file if scanning multiple files at once
        if (!options.scanAllUnmanaged) {
            options.file = options.file || detect_1.detectPackageFile(root);
        }
        if (!options.docker && !(options.file || options.packageManager)) {
            throw errors_1.NoSupportedManifestsFoundError([...root]);
        }
        inspectRes = yield get_single_plugin_result_1.getSinglePluginResult(root, options);
        if (!cli_interface_1.legacyPlugin.isMultiResult(inspectRes)) {
            if (!inspectRes.package) {
                // something went wrong if both are not present...
                throw Error(`error getting dependencies from ${options.docker ? 'docker' : options.packageManager} ` + "plugin: neither 'package' nor 'scannedProjects' were found");
            }
            return convert_single_splugin_res_to_multi_custom_1.convertSingleResultToMultiCustom(inspectRes, options.packageManager);
        }
        // We are using "options" to store some information returned from plugin that we need to use later,
        // but don't want to send to Registry in the Payload.
        // TODO(kyegupov): decouple inspect and payload so that we don't need this hack
        options.projectNames = inspectRes.scannedProjects.map((scannedProject) => scannedProject.depTree.name);
        return convert_multi_plugin_res_to_multi_custom_1.convertMultiResultToMultiCustom(inspectRes, options.packageManager);
    });
}
exports.getDepsFromPlugin = getDepsFromPlugin;
//# sourceMappingURL=get-deps-from-plugin.js.map