"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const depGraphLib = require("@snyk/dep-graph");
function pruneTree(tree, packageManagerName) {
    return __awaiter(this, void 0, void 0, function* () {
        // Pruning requires conversion to the graph first.
        // This is slow.
        const graph = yield depGraphLib.legacy.depTreeToGraph(tree, packageManagerName);
        const prunedTree = (yield depGraphLib.legacy.graphToDepTree(graph, packageManagerName, { deduplicateWithinTopLevelDeps: true }));
        // Transplant pruned dependencies in the original tree (we want to keep all other fields):
        tree.dependencies = prunedTree.dependencies;
        return tree;
    });
}
exports.pruneTree = pruneTree;
//# sourceMappingURL=prune-dep-tree.js.map