"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const gitUrlParse = require("git-url-parse");
const subProcess = require("../../sub-process");
function getInfo(packageInfo) {
    return __awaiter(this, void 0, void 0, function* () {
        if (packageInfo.docker) {
            return null;
        }
        const target = {};
        try {
            const origin = (yield subProcess.execute('git', ['remote', 'get-url', 'origin'])).trim();
            if (origin) {
                const parsedOrigin = gitUrlParse(origin);
                target.remoteUrl = parsedOrigin.toString('http');
            }
        }
        catch (err) {
            // Swallowing exception since we don't want to break the monitor if there is a problem
            // executing git commands.
        }
        try {
            target.branch = (yield subProcess.execute('git', ['rev-parse', '--abbrev-ref', 'HEAD'])).trim();
        }
        catch (err) {
            // Swallowing exception since we don't want to break the monitor if there is a problem
            // executing git commands.
        }
        return target;
    });
}
exports.getInfo = getInfo;
//# sourceMappingURL=git.js.map