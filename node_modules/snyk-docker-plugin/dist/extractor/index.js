"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const layer_1 = require("./layer");
/**
 * Given a path on the file system to a docker-archive, open it up to inspect the layers
 * and look for specific files. File content can be transformed with a custom callback function if needed.
 * @param fileSystemPath Path to an existing docker-archive.
 * @param extractActions This denotes a file pattern to look for and how to transform the file if it is found.
 * By default the file is returned raw if no processing is desired.
 */
function getDockerArchiveLayersAndManifest(fileSystemPath, extractActions) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const dockerArchive = yield layer_1.extractDockerArchive(fileSystemPath, extractActions);
        const extractedLayers = {};
        // TODO: This removes the information about the layer name, maybe we would need it in the future?
        for (const layer of dockerArchive.layers) {
            // go over extracted files products found in this layer
            for (const filename of Object.keys(layer)) {
                // file was not found
                if (!Reflect.has(extractedLayers, filename)) {
                    extractedLayers[filename] = layer[filename];
                }
            }
        }
        return {
            layers: extractedLayers,
            manifest: dockerArchive.manifest,
        };
    });
}
exports.getDockerArchiveLayersAndManifest = getDockerArchiveLayersAndManifest;
function isBufferType(type) {
    return type.buffer !== undefined;
}
function isStringType(type) {
    return type.substring !== undefined;
}
function getContentAsBuffer(extractedLayers, extractAction) {
    const content = getContent(extractedLayers, extractAction);
    return content !== undefined && isBufferType(content) ? content : undefined;
}
exports.getContentAsBuffer = getContentAsBuffer;
function getContentAsString(extractedLayers, extractAction) {
    const content = getContent(extractedLayers, extractAction);
    return content !== undefined && isStringType(content) ? content : undefined;
}
exports.getContentAsString = getContentAsString;
function getContent(extractedLayers, extractAction) {
    const fileName = extractAction.fileNamePattern;
    return fileName in extractedLayers &&
        extractAction.actionName in extractedLayers[fileName]
        ? extractedLayers[fileName][extractAction.actionName]
        : undefined;
}
//# sourceMappingURL=index.js.map