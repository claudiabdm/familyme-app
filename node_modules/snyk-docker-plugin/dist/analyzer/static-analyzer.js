"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const Debug = require("debug");
const extractor_1 = require("../extractor");
const static_1 = require("../inputs/apk/static");
const static_2 = require("../inputs/apt/static");
const static_3 = require("../inputs/os-release/static");
const static_4 = require("../inputs/rpm/static");
const types_1 = require("../types");
const osReleaseDetector = require("./os-release");
const apk_1 = require("./package-managers/apk");
const apt_1 = require("./package-managers/apt");
const rpm_1 = require("./package-managers/rpm");
const debug = Debug("snyk");
function analyze(targetImage, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (options.imageType !== types_1.ImageType.DockerArchive) {
            throw new Error("Unhandled image type");
        }
        const staticAnalysisActions = [
            static_1.getApkDbFileContentAction,
            static_2.getDpkgFileContentAction,
            static_2.getExtFileContentAction,
            static_4.getRpmDbFileContentAction,
            ...static_3.getOsReleaseActions,
        ];
        const dockerArchive = yield extractor_1.getDockerArchiveLayersAndManifest(options.imagePath, staticAnalysisActions);
        const archiveLayers = dockerArchive.layers;
        const [apkDbFileContent, aptDbFileContent, rpmDbFileContent,] = yield Promise.all([
            static_1.getApkDbFileContent(archiveLayers),
            static_2.getAptDbFileContent(archiveLayers),
            static_4.getRpmDbFileContent(archiveLayers, options.tmpDirPath),
        ]);
        const osRelease = yield osReleaseDetector
            .detectStatically(archiveLayers)
            .catch((err) => {
            debug(err);
            throw new Error("Failed to detect OS release");
        });
        const results = yield Promise.all([
            apk_1.analyze(targetImage, apkDbFileContent),
            apt_1.analyze(targetImage, aptDbFileContent),
            rpm_1.analyze(targetImage, rpmDbFileContent),
        ]).catch((err) => {
            debug(err);
            throw new Error("Failed to detect installed OS packages");
        });
        const imageId = targetImage;
        // Key binaries are not yet handled in static analysis.
        const binaries = [];
        return {
            imageId,
            osRelease,
            results,
            binaries,
            imageLayers: dockerArchive.manifest.Layers,
        };
    });
}
exports.analyze = analyze;
//# sourceMappingURL=static-analyzer.js.map