"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const event_loop_spinner_1 = require("event-loop-spinner");
const minimatch = require("minimatch");
const fspath = require("path");
const lsu = require("./ls-utils");
const subProcess = require("./sub-process");
class Docker {
    constructor(targetImage, options) {
        this.targetImage = targetImage;
        this.optionsList = Docker.createOptionsList(options);
    }
    static run(args, options) {
        return subProcess.execute("docker", [
            ...Docker.createOptionsList(options),
            ...args,
        ]);
    }
    static createOptionsList(options) {
        const opts = [];
        if (!options) {
            return opts;
        }
        if (options.host) {
            opts.push(`--host=${options.host}`);
        }
        if (options.tlscert) {
            opts.push(`--tlscert=${options.tlscert}`);
        }
        if (options.tlscacert) {
            opts.push(`--tlscacert=${options.tlscacert}`);
        }
        if (options.tlskey) {
            opts.push(`--tlskey=${options.tlskey}`);
        }
        if (options.tlsverify) {
            opts.push(`--tlsverify=${options.tlsverify}`);
        }
        return opts;
    }
    /**
     * Runs the command, catching any expected errors and returning them as normal
     * stderr/stdout result.
     */
    runSafe(cmd, args = [], 
    // no error is thrown if any of listed errors is found in stderr
    ignoreErrors = ["No such file", "file not found"]) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return yield this.run(cmd, args);
            }
            catch (error) {
                const stderr = error.stderr;
                if (typeof stderr === "string") {
                    if (ignoreErrors.some((errMsg) => stderr.indexOf(errMsg) >= 0)) {
                        return { stdout: error.stdout, stderr };
                    }
                }
                throw error;
            }
        });
    }
    run(cmd, args = []) {
        return subProcess.execute("docker", [
            ...this.optionsList,
            "run",
            "--rm",
            "--entrypoint",
            '""',
            "--network",
            "none",
            this.targetImage,
            cmd,
            ...args,
        ]);
    }
    inspect(targetImage) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return subProcess.execute("docker", [
                ...this.optionsList,
                "inspect",
                targetImage,
            ]);
        });
    }
    catSafe(filename) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.runSafe("cat", [filename]);
        });
    }
    lsSafe(path, recursive) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let params = "-1ap";
            if (recursive) {
                params += "R";
            }
            const ignoreErrors = [
                "No such file",
                "file not found",
                "Permission denied",
            ];
            return this.runSafe("ls", [params, path], ignoreErrors);
        });
    }
    /**
     * Find files on a docker image according to a given list of glob expressions.
     */
    findGlobs(globs, exclusionGlobs = [], path = "/", recursive = true) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const res = [];
            const output = yield this.lsSafe(path, recursive);
            if (event_loop_spinner_1.eventLoopSpinner.isStarving()) {
                yield event_loop_spinner_1.eventLoopSpinner.spin();
            }
            const root = lsu.parseLsOutput(output.stdout);
            yield lsu.iterateFiles(root, (f) => {
                const filepath = fspath.join(f.path, f.name);
                let exclude = false;
                for (const g of exclusionGlobs) {
                    if (!exclude && minimatch(filepath, g)) {
                        exclude = true;
                    }
                }
                if (!exclude) {
                    for (const g of globs) {
                        if (minimatch(filepath, g)) {
                            res.push(filepath);
                        }
                    }
                }
            });
            return res;
        });
    }
}
exports.Docker = Docker;
//# sourceMappingURL=docker.js.map