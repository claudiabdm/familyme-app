"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const parse_mvn_1 = require("./parse-mvn");
const fs = require("fs");
const path = require("path");
const subProcess = require("./sub-process");
const jar_1 = require("./jar");
function inspect(root, targetFile, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const targetPath = targetFile
            ? path.resolve(root, targetFile)
            : path.resolve(root);
        if (!fs.existsSync(targetPath)) {
            throw new Error('Could not find file or directory ' + targetPath);
        }
        if (!options) {
            options = { dev: false, scanAllUnmanaged: false };
        }
        if (jar_1.isJar(targetPath)) {
            targetFile = yield jar_1.createPomForJar(root, targetFile);
        }
        if (options.scanAllUnmanaged) {
            if (jar_1.containsJar(root)) {
                targetFile = yield jar_1.createPomForJars(root);
            }
            else {
                throw Error(`Could not find any supported files in '${root}'.`);
            }
        }
        const mvnArgs = buildArgs(targetFile, options.args);
        try {
            const result = yield subProcess.execute('mvn', mvnArgs, { cwd: root });
            const versionResult = yield subProcess.execute('mvn --version', [], {
                cwd: root,
            });
            const parseResult = parse_mvn_1.parseTree(result, options.dev);
            const { javaVersion, mavenVersion } = parse_mvn_1.parseVersions(versionResult);
            return {
                plugin: {
                    name: 'bundled:maven',
                    runtime: 'unknown',
                    meta: {
                        versionBuildInfo: {
                            metaBuildVersion: {
                                mavenVersion,
                                javaVersion,
                            },
                        },
                    },
                },
                package: parseResult.data,
            };
        }
        catch (error) {
            error.message =
                error.message +
                    '\n\n' +
                    'Please make sure that Apache Maven Dependency Plugin ' +
                    'version 2.2 or above is installed, and that ' +
                    '`mvn ' +
                    mvnArgs.join(' ') +
                    '` executes successfully ' +
                    'on this project.\n\n' +
                    'If the problem persists, collect the output of ' +
                    '`mvn ' +
                    mvnArgs.join(' ') +
                    '` and contact support@snyk.io\n';
            throw error;
        }
    });
}
exports.inspect = inspect;
function buildArgs(targetFile, mavenArgs) {
    // Requires Maven >= 2.2
    let args = ['dependency:tree', '-DoutputType=dot'];
    if (targetFile) {
        args.push('--file="' + targetFile + '"');
    }
    if (mavenArgs) {
        args = args.concat(mavenArgs);
    }
    return args;
}
exports.buildArgs = buildArgs;
//# sourceMappingURL=index.js.map